{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/what-the-heck-is-jwt-anyway","result":{"data":{"markdownRemark":{"id":"72394551-6ac6-5478-ba45-5422811283a6","html":"<p>Originally published in <a href=\"https://dev.to/siwalikm/what-the-heck-is-jwt-anyway--47hg\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">dev.to</a> website.</p>\n<p>In this article we will learn the fundamentals of a JWT token is and how we can benefit from it for authenticating communications between two parties, all of this using vanilla NodeJS and javascript.</p>\n<blockquote>\n<p>JWT is an abbreviation for JSON Web Token, which is a compact URL-safe means of representing claims to be transferred between two parties. The claims in a JWT are encoded as a JSON object that is digitally signed using JSON Web Signature (JWS). ~ IETF</p>\n</blockquote>\n<p><strong>Urggh! What?</strong></p>\n<p>Simply put, JWT token is a string we pass in the header or url while making a network request to pass data safely and make sure it hasn’t been tampered with.</p>\n<p>Example: www.example.com/private/?token=xxxxx.yyyyy.zzzzz</p>\n<p>You might be wondering what’s with the token format! JWT tokens consists of three parts separated by dots <code class=\"language-text\">( . )</code> which are:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">header.payload.signature</code></pre></div>\n<p>Let’s see the differents parts of a JWT token in details.</p>\n<p><strong>1. Header</strong>\nThe header typically consists of two parts: the type of the token, which is JWT, and the hashing algorithm being used, such as HMAC SHA256 or RSA.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n   <span class=\"token string-property property\">\"alg\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"HS256\"</span><span class=\"token punctuation\">,</span>\n   <span class=\"token string-property property\">\"typ\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"JWT\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Then, this JSON is Base64Url encoded to form the first part of the JWT.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token string\">'use strict'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> header <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">alg</span><span class=\"token operator\">:</span> <span class=\"token string\">'HS256'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">typ</span><span class=\"token operator\">:</span> <span class=\"token string\">'JWT'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> enc_header <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>header<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'base64'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ► \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9\"</span></code></pre></div>\n<p><strong>2. Payload</strong></p>\n<p>The second part of the token is the payload, which contains the <strong>claims</strong>. Claims are predefined keys and their values. There are three types of claims: registered, public, and private claims.</p>\n<ul>\n<li><strong>Registered claims:</strong> These are a set of predefined keys which are not mandatory but recommended. Some of them are <strong>iss</strong> (issuer), <strong>exp</strong> (expiration time) etc.</li>\n<li><strong>Public claims:</strong> These can be defined at will by those using JWTs. But to avoid collisions they should be defined in the IANA JSON Web Token Registry or be defined as a URI that contains a collision resistant namespace.</li>\n<li><strong>Private claims:</strong> These are the custom key value pairs created to share information between parties that agree on using them and are neither registered or public claims.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n   <span class=\"token string-property property\">\"exp\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2019-02-14\"</span><span class=\"token punctuation\">,</span>\n   <span class=\"token string-property property\">\"message\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"roses are red\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The payload is then Base64Url encoded to form the second part of the JSON Web Token.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token string\">'use strict'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> payload <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">exp</span><span class=\"token operator\">:</span> <span class=\"token string\">'2019-02-14'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token string\">'roses are red'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> enc_payload <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'base64'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ► eyJleHAiOiIyMDE5LTAyLTE0IiwibmFtZSI6IkpvaG4gRG9lIn0</span></code></pre></div>\n<p><strong>3. Signature</strong></p>\n<p>To create the signature part you have to take the encoded header, the encoded payload, a secret, the algorithm specified in the header, and sign that. Too good for us that NodeJS comes with the immensely powerful <a href=\"https://nodejs.org/api/crypto.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Crypto library</a> out of the box which we will use in our example.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token string\">'use strict'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> crypto <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'crypto'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> jwt_secret <span class=\"token operator\">=</span> <span class=\"token string\">'secret'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// enc_header and enc_payload are computed earlier</span>\n<span class=\"token keyword\">var</span> signature <span class=\"token operator\">=</span> crypto\n  <span class=\"token punctuation\">.</span><span class=\"token function\">createHmac</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sha256'</span><span class=\"token punctuation\">,</span> jwt_secret<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>enc_header <span class=\"token operator\">+</span> <span class=\"token string\">'.'</span> <span class=\"token operator\">+</span> enc_payload<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">digest</span><span class=\"token punctuation\">(</span><span class=\"token string\">'base64'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ► 6C46KAaZGp6RjbSqGllfdQF7g8vXCp02NTSrz-PzeoI</span></code></pre></div>\n<p>The signature is used to verify that the sender of the JWT is who it says it is and to ensure that the message wasn’t changed along the way.</p>\n<p>The final JWT token looks like this</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> token <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>enc_header<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>enc_payload<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>signature<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ► eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOiIyMDE5LTAyLTE0IiwibWVzc2FnZSI6InJvc2VzIGFyZSByZWQifQ.0u-mkgLo5479CPjJJ4mXCwn2RW4dFT12fiYiopRWsZw</span></code></pre></div>\n<p>Something important to remember here is that JWT tokens are used for authentication and not encryption, so even without knowing the secret key, someone can read your header and payload data.</p>\n<p>But upon receiving the token you can sign the header and payload again with your secret key and compare it with the received signature to detect tampering of token or the message.</p>\n<p>A good place to start will be by going to this <a href=\"https://jwt.io/#debugger\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">online JWT debugger at jwt.io</a> and play around with the the token we just generated above.</p>\n<p>Hi! I’m <a href=\"https://twitter.com/intent/follow?user_id=4708084272\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@Siwalik</a>! If you liked this article, follow me on twitter to know about my latest tech expeditions and side projects! 🙌</p>","fields":{"slug":"/posts/what-the-heck-is-jwt-anyway","tagSlugs":["/tag/auth/"]},"timeToRead":4,"frontmatter":{"date":"2018-03-03T20:08:55.149Z","description":"In this article, we will learn the fundamentals of a JWT token is and how we can benefit from it for authenticating communications between two parties, all of this using vanilla NodeJS and javascript.","tags":["auth"],"title":"What the heck is JWT anyway?","socialImage":null}}},"pageContext":{"slug":"/posts/what-the-heck-is-jwt-anyway","prevPost":null,"nextPost":{"node":{"frontmatter":{"template":"post","title":"Mastering the Full-stack with JS Superpowers"},"fields":{"slug":"/posts/mastering-full-stack-with-javascripts-superpowers"}}}}},"staticQueryHashes":["2079216403","251939775","401334301"]}